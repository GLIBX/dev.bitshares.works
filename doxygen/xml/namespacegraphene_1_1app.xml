<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegraphene_1_1app" kind="namespace" language="C++">
    <compoundname>graphene::app</compoundname>
    <innerclass refid="classgraphene_1_1app_1_1abstract__plugin" prot="public">graphene::app::abstract_plugin</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1account__asset__balance" prot="public">graphene::app::account_asset_balance</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1api__access" prot="public">graphene::app::api_access</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1api__access__info" prot="public">graphene::app::api_access_info</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1application" prot="public">graphene::app::application</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1application__options" prot="public">graphene::app::application_options</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1asset__api" prot="public">graphene::app::asset_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1asset__holders" prot="public">graphene::app::asset_holders</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1block__api" prot="public">graphene::app::block_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1crypto__api" prot="public">graphene::app::crypto_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1database__api" prot="public">graphene::app::database_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1database__api__impl" prot="public">graphene::app::database_api_impl</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1full__account" prot="public">graphene::app::full_account</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1get__required__fees__helper" prot="public">graphene::app::get_required_fees_helper</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1history__api" prot="public">graphene::app::history_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1history__operation__detail" prot="public">graphene::app::history_operation_detail</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1limit__order__group" prot="public">graphene::app::limit_order_group</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1login__api" prot="public">graphene::app::login_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1market__ticker" prot="public">graphene::app::market_ticker</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1market__trade" prot="public">graphene::app::market_trade</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1market__volume" prot="public">graphene::app::market_volume</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1network__broadcast__api" prot="public">graphene::app::network_broadcast_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1network__node__api" prot="public">graphene::app::network_node_api</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1order" prot="public">graphene::app::order</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1order__book" prot="public">graphene::app::order_book</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1orders__api" prot="public">graphene::app::orders_api</innerclass>
    <innerclass refid="classgraphene_1_1app_1_1plugin" prot="public">graphene::app::plugin</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1verify__range__proof__rewind__result" prot="public">graphene::app::verify_range_proof_rewind_result</innerclass>
    <innerclass refid="structgraphene_1_1app_1_1verify__range__result" prot="public">graphene::app::verify_range_result</innerclass>
    <innernamespace refid="namespacegraphene_1_1app_1_1detail">graphene::app::detail</innernamespace>
    <innernamespace refid="namespacegraphene_1_1app_1_1impl">graphene::app::impl</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespacegraphene_1_1app_1a0d7b9dd9560bcbbbfe65c4562a17ceb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T graphene::app::dejsonify</definition>
        <argsstring>(const string &amp;s, uint32_t max_depth)</argsstring>
        <name>dejsonify</name>
        <param>
          <type>const string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some useful tools for boost::program_options arguments using vectors of JSON strings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/plugin.hpp" line="126" column="1" bodyfile="libraries/app/include/graphene/app/plugin.hpp" bodystart="126" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegraphene_1_1app_1a68cce708efd2be5859a5e75899e3f4f1" prot="public" static="no">
        <type>boost::multiprecision::uint256_t</type>
        <definition>typedef boost::multiprecision::uint256_t graphene::app::u256</definition>
        <argsstring></argsstring>
        <name>u256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="35" column="1" bodyfile="libraries/app/include/graphene/app/util.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1app_1acff79f90fbb15c501c462c2621c052b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::load_configuration_options</definition>
        <argsstring>(const fc::path &amp;data_dir, const bpo::options_description &amp;cfg_options, bpo::variables_map &amp;options)</argsstring>
        <name>load_configuration_options</name>
        <param>
          <type>const fc::path &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>const bpo::options_description &amp;</type>
          <declname>cfg_options</declname>
        </param>
        <param>
          <type>bpo::variables_map &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/config_util.cpp" line="307" column="1" bodyfile="libraries/app/config_util.cpp" bodystart="307" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1aecfed3795b040035a074171c248c08d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::app::load_configuration_options</definition>
        <argsstring>(const fc::path &amp;data_dir, const boost::program_options::options_description &amp;cfg_options, boost::program_options::variables_map &amp;options)</argsstring>
        <name>load_configuration_options</name>
        <param>
          <type>const fc::path &amp;</type>
          <declname>data_dir</declname>
        </param>
        <param>
          <type>const boost::program_options::options_description &amp;</type>
          <declname>cfg_options</declname>
        </param>
        <param>
          <type>boost::program_options::variables_map &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/config_util.hpp" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1a8235359fc02af7a350bb55033b850dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1app_1a68cce708efd2be5859a5e75899e3f4f1" kindref="member">u256</ref></type>
        <definition>u256 graphene::app::to256</definition>
        <argsstring>(const fc::uint128 &amp;t)</argsstring>
        <name>to256</name>
        <param>
          <type>const fc::uint128 &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="37" column="1" bodyfile="libraries/app/util.cpp" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1af047f47d42f0057b71b692a49d87051b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fc::uint128</type>
        <definition>fc::uint128 graphene::app::to_capped128</definition>
        <argsstring>(const u256 &amp;t)</argsstring>
        <name>to_capped128</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1app_1a68cce708efd2be5859a5e75899e3f4f1" kindref="member">u256</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="38" column="1" bodyfile="libraries/app/util.cpp" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1ac983e2615e3c4305778d61b9f0c4450a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::app::uint128_amount_to_string</definition>
        <argsstring>(const fc::uint128 &amp;amount, const uint8_t precision)</argsstring>
        <name>uint128_amount_to_string</name>
        <param>
          <type>const fc::uint128 &amp;</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="39" column="1" bodyfile="libraries/app/util.cpp" bodystart="54" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1aa5c778a6ce322d86a92a25bceeeffdd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::app::price_to_string</definition>
        <argsstring>(const price &amp;_price, const uint8_t base_precision, const uint8_t quote_precision)</argsstring>
        <name>price_to_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>_price</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>base_precision</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>quote_precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="40" column="1" bodyfile="libraries/app/util.cpp" bodystart="80" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1app_1a4960f0d94097a5cda651acec71c461ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::app::price_diff_percent_string</definition>
        <argsstring>(const price &amp;old_price, const price &amp;new_price)</argsstring>
        <name>price_diff_percent_string</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>old_price</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>new_price</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/util.hpp" line="41" column="1" bodyfile="libraries/app/util.cpp" bodystart="102" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/app/api.cpp" line="43" column="1"/>
  </compounddef>
</doxygen>
